{"/home/travis/build/npmtest/node-npmtest-electron-notifications/test.js":"/* istanbul instrument in package npmtest_electron_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/lib.npmtest_electron_notifications.js":"/* istanbul instrument in package npmtest_electron_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_notifications = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_notifications = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-notifications && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_notifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_notifications\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_notifications.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_notifications.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_notifications.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_notifications.__dirname + '/lib.npmtest_electron_notifications.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/index.js":"const Notifier = require('./lib/notifier')\n\nmodule.exports = new Notifier()\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/notifier.js":"const electron = require('electron');\nconst is = require('electron-is');\n\nclass Notifier {\n  constructor () {\n    this.activeNotifications = [];\n    this.notificationHeight = 80;\n    this.queue = [];\n    this.startBarSizeEstimate = 90;\n    if (process.type === 'renderer') {\n      this.BrowserWindow = electron.remote.BrowserWindow;\n    } else {\n      this.BrowserWindow = electron.BrowserWindow;\n    }\n  }\n\n  configure(options) {\n\t  if(options.hasOwnProperty('stackGap')) {\n\t\tthis.stackGap = options.stackGap;\n\t  }\n  }\n\n  notify (title, data) {\n    const isWindows = process.platform === 'win32'\n    const options = Object.assign({}, data);\n    const size = electron.screen.getPrimaryDisplay().workAreaSize;\n    let verticalSpace = 0;\n    if (options.vertical && options.buttons && options.buttons.length) {\n      verticalSpace = Math.min(options.buttons.length * 40, 80);\n    } else {\n      options.vertical = false;\n    }\n    options.stackGap = this.stackGap;\n    let windowOptions = {\n      width: 400,\n      height: this.notificationHeight + verticalSpace,\n      x: size.width - 400,\n      y: 0,  /* this is because we set the poper position when we pop it from the queue */\n      frame: false,\n      resizable: false,\n      alwaysOnTop: true,\n      skipTaskbar: true,\n      webPreferences: {\n        devTools: false,\n      },\n      focusable: false,\n    };\n    if (!is.macOS()) {\n      //this causes close/resize buttons to show on macOS\n      windowOptions.titleBarStyle = 'hidden';\n    }\n    const notificationWindow = new this.BrowserWindow(windowOptions);\n    this.queue.push({\n      window:notificationWindow,\n      title:title,\n      options:options\n    });\n    this.showNext();\n    return notificationWindow;\n  }\n\n  showNext () {\n    if (this.queue.length === 0) {\n      return;\n    }\n    const size = electron.screen.getPrimaryDisplay().workAreaSize;\n    var availableHeight = size.height - (is.windows()?this.startBarSizeEstimate:0);\n    for(var j = 0; j < this.activeNotifications.length ; j++) {\n    \tavailableHeight -= this.activeNotifications[j].window.getBounds().height;\n    }\n    if(availableHeight < this.queue[0].window.getBounds().height) {\n      return;\n    }\n    const notification = this.queue.shift();\n    const title = notification.title;\n    const options = notification.options;\n    let notificationWindow = notification.window;\n\n    var notificationY = 0;\n\n    for(var i = 0; i < this.activeNotifications.length ; i++) {\n      var item = this.activeNotifications[i];\n      notificationY += item.window.getBounds().height + 10\n    }\n\n    this.activeNotifications.push(notification);\n\n    notificationWindow.loadURL('file://' + __dirname + '/assets/notification.html');\n\n    notificationWindow.webContents.on('did-finish-load', () => {\n      notificationWindow.show();\n      notificationWindow.webContents.send('setup', title, options);\n    })\n    const timeout = setTimeout(() => {\n      //console.log(\"closing notification window!\")\n      //console.log(\"Is notification window gone? \", notificationWindow.isDestroyed())\n      if (!notificationWindow.isDestroyed()) {\n        notificationWindow.close()\n      }\n    }, options.duration || 4000);\n\n    notificationWindow.setPosition(\n      notificationWindow.getPosition()[0],\n      is.windows()?size.height-this.startBarSizeEstimate-notificationY:notificationY,\n      true\n    );\n\n    const currentWindow = electron.remote && electron.remote.getCurrentWindow()\n    if (notificationWindow) {\n      notificationWindow.on('close', () => {\n        this.nextY = 0;\n        var loc = this.activeNotifications.indexOf(notification);\n        if(loc > -1) {\n          this.activeNotifications = this.activeNotifications.filter(function(item){\n            return item.window != this.window;\n          }.bind(notification));\n        }\n        if (notificationWindow) {\n          notificationWindow.removeAllListeners();\n        }\n        for(var i = 0; i < this.activeNotifications.length ; i++) {\n          var item = this.activeNotifications[i];\n          var canMove = true;\n          try {\n            item.window.getPosition();\n          } catch(e) {\n            canMove = false;\n          }\n          if(canMove) {\n            console.log(\"window at index \"+[1]+\" is moving to position \"+this.nextY);\n            const size = electron.screen.getPrimaryDisplay().workAreaSize\n            // TODO - do a pretty slide up/down to collapse list\n            item.window.setPosition(\n              item.window.getPosition()[0],\n              is.windows()?size.height-this.startBarSizeEstimate-this.nextY:this.nextY,\n              true /* TODO : this is electron \"animate\" param - it's not working on windows */\n            );\n            var itemHeight = item.window.getBounds().height;\n            this.nextY += itemHeight;\n            console.log(item);\n          }\n        }\n        if(this.queue.length) {\n          this.showNext();\n\n        }\n      });\n    }\n    this.showNext();\n    notificationWindow.on('closed', () => {\n      clearTimeout(timeout);\n      notificationWindow = null;\n    });\n  }\n}\n\nmodule.exports = Notifier;\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/app.js":"const Notification = require('../notification')\n\nconst { ipcRenderer } = require('electron')\n\nipcRenderer.on('setup', (event, title, options) => {\n  new Notification(title, options)\n})\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/notification.js":"const electron = require('electron')\nconst NotificationView = require('./notificationView')\nconst ClickBehavior = require('./behaviors/clickBehavior')\nconst SwipeRightBehavior = require('./behaviors/swipeRightBehavior')\n\nconst { remote } = electron\n\nclass Notification {\n  constructor (title, options) {\n    this.mainWindow = remote.getCurrentWindow()\n    this.view = new NotificationView(title, options)\n    this.view.render()\n    this.addBehavior(ClickBehavior)\n    this.addBehavior(SwipeRightBehavior)\n  }\n\n  addBehavior (Klass) {\n    const item = new Klass(this.view.element)\n    item.on('behavior', (eventName) => {\n      this.mainWindow.emit(eventName)\n    })\n  }\n}\n\nmodule.exports = Notification\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/notificationView.js":"const electron = require('electron')\n\nconst { remote } = electron\n\nclass NotificationView {\n  constructor (title, options) {\n    this.element = document.getElementById('notification')\n    this.iconEl = document.getElementById('icon')\n    this.titleEl = document.getElementById('title')\n    this.messageEl = document.getElementById('message')\n    this.buttonsEl = document.getElementById('buttons')\n    this.title = title\n    this.options = options\n  }\n\n  render () {\n    this.titleEl.innerHTML = this.title\n    this.iconEl.src = this.options.icon || 'electron.png'\n\n    if (this.options.message) {\n      this.messageEl.innerHTML = this.options.message\n    } else {\n      const parent = this.messageEl.parentElement\n      parent.classList.add('onlyTitle')\n      parent.removeChild(this.messageEl)\n    }\n\n    this.setupButtons()\n    this.decorateClasses()\n  }\n\n  setupButtons () {\n    this.buttons().forEach((actionName, buttonIndex) => {\n      const link = document.createElement('a')\n      link.href = '#'\n      link.innerHTML = actionName\n      link.addEventListener('click', (event) => {\n        const mainWindow = remote.getCurrentWindow()\n        mainWindow.emit('buttonClicked', event.target.innerHTML, buttonIndex, this.options)\n      })\n      this.buttonsEl.appendChild(link)\n    })\n  }\n\n  decorateClasses () {\n    const buttonLength = this.buttons().length\n\n    if (buttonLength > 0) {\n      this.element.classList.add('actions')\n    }\n\n    if (this.options.vertical) {\n      this.element.classList.add('vertical')\n    } else {\n      this.element.classList.add('horizontal')\n    }\n\n    if (buttonLength >= 2) {\n      this.element.classList.add('double')\n    } else {\n      this.element.classList.add('single')\n    }\n\n    if (this.options.flat) {\n      this.element.classList.add('flat')\n      this.iconEl.classList.add('flat')\n      this.titleEl.classList.add('flat')\n      this.messageEl.classList.add('flat')\n      this.buttonsEl.classList.add('flat')\n    }\n  }\n\n  buttons () {\n    return (this.options.buttons || []).slice(0, 2)\n  }\n}\n\nmodule.exports = NotificationView\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/playbook/main.js":"const { app, BrowserWindow } = require('electron')\n\nlet mainWindow = null\n\napp.on('ready', () => {\n  mainWindow = new BrowserWindow({width: 800, height: 600})\n  mainWindow.loadURL('file://' + __dirname + '/playbook.html')\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n})\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/behaviors/clickBehavior.js":"const electron = require('electron')\nconst EventEmitter = require('events')\n\nconst { remote } = electron\n\nclass ClickBehavior extends EventEmitter {\n  constructor (element) {\n    super()\n    this.mainWindow = remote.getCurrentWindow()\n    this.mainWindow.on('move', this.move.bind(this))\n    this.clicks = this.moves = 0\n    element.addEventListener('click', this.click.bind(this))\n  }\n\n  checkClick () {\n    if (this.clicks !== this.moves) {\n      this.clicks = this.moves = 0\n      this.emit('behavior', 'clicked')\n    }\n  }\n\n  move () {\n    this.moves++\n  }\n\n  click (event) {\n    if (event.target.tagName === 'A') return\n    this.clicks++\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(this.checkClick.bind(this), 150)\n  }\n}\n\nmodule.exports = ClickBehavior\n","/home/travis/build/npmtest/node-npmtest-electron-notifications/node_modules/electron-notifications/lib/behaviors/swipeRightBehavior.js":"const electron = require('electron')\nconst EventEmitter = require('events')\n\nconst { remote } = electron\n\nclass SwipeRightBehavior extends EventEmitter {\n  constructor () {\n    super()\n    this.mainWindow = remote.getCurrentWindow()\n    this.xLeader = this.mainWindow.getPosition()[0]\n    this.xFollower = this.xLeader\n    this.mainWindow.on('move', this.move.bind(this))\n  }\n\n  move () {\n    this.xFollower = this.xLeader\n    this.xLeader = this.mainWindow.getPosition()[0]\n    if (this.xFollower < this.xLeader) {\n      this.emit('behavior', 'swipedRight')\n    }\n  }\n}\n\nmodule.exports = SwipeRightBehavior\n"}